<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[interview-java基础]]></title>
      <url>/2017/04/23/interview-java%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="多线程并发访问HashMap"><a href="#多线程并发访问HashMap" class="headerlink" title="多线程并发访问HashMap"></a>多线程并发访问HashMap</h2><ul>
<li>会造成线程死锁.(原因是并发插入会造成闭散列链表形成闭环,读线程会一直死循环在闭环里)</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Interview </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> Interview </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[interview-数据库]]></title>
      <url>/2017/04/23/interview-%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="脏读-不可重复读-幻读"><a href="#脏读-不可重复读-幻读" class="headerlink" title="脏读 不可重复读 幻读"></a>脏读 不可重复读 幻读</h1><h2 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h2><p>A事务访问数据并修改数据,事务未提交时<br>B事务来<code>读取</code>已修改的数据.<br>A事务回滚,放弃修改,那么B事务读到的就是脏数据</p>
<h2 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h2><p>A事务第一次读取数据(比如前10条)<br>B事务<code>update</code>第1条数据,commit<br>A事务第二次读取数据(前10条),和第一次读取有差异</p>
<h2 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h2><p>A事务第一次读取全部数据行(共10条)<br>B事务<code>insert</code>一条数据,commit<br>A事务第二次读取全部数据行(共11条),和第一次读取有差异</p>
<h1 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h1><table>
<thead>
<tr>
<th>隔离级别</th>
<th style="text-align:center">脏读</th>
<th style="text-align:center">不可重复读</th>
<th style="text-align:right">幻读</th>
</tr>
</thead>
<tbody>
<tr>
<td>Read uncommitted (读未提交)</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:right">√</td>
</tr>
<tr>
<td>Read committed (读已提交)</td>
<td style="text-align:center">x</td>
<td style="text-align:center">√</td>
<td style="text-align:right">√</td>
</tr>
<tr>
<td>Repeatable read (可重复读)</td>
<td style="text-align:center">x</td>
<td style="text-align:center">x</td>
<td style="text-align:right">√</td>
</tr>
<tr>
<td>Serializable (可串行化)</td>
<td style="text-align:center">x</td>
<td style="text-align:center">x</td>
<td style="text-align:right">x</td>
</tr>
</tbody>
</table>
<h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p><a href="http://blog.csdn.net/kennyrose/article/details/7532032" target="_blank" rel="external">参考链接</a></p>
<h2 id="聚集索引和非聚集索引"><a href="#聚集索引和非聚集索引" class="headerlink" title="聚集索引和非聚集索引"></a>聚集索引和非聚集索引</h2><ul>
<li>聚集索引一个表只能有一个，而非聚集索引一个表可以存在多个</li>
<li>聚集索引存储记录是物理上连续存在，而非聚集索引是逻辑上的连续，物理存储并不连续.</li>
</ul>
<h2 id="索引的实现"><a href="#索引的实现" class="headerlink" title="索引的实现"></a>索引的实现</h2><p>通常使用B树及其变种B+树。</p>
<h2 id="索引的作用"><a href="#索引的作用" class="headerlink" title="索引的作用"></a>索引的作用</h2><ul>
<li>唯一性索引可以保证数据库表中每一行数据的唯一性。</li>
<li>加快数据的检索速度，这也是创建索引的最主要的原因。</li>
<li>加速表和表之间的连接.</li>
<li>在使用分组和排序子句进行数据检索时，显著减少查询中分组和排序的时间。</li>
<li>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。</li>
</ul>
<h2 id="索引不利的方面"><a href="#索引不利的方面" class="headerlink" title="索引不利的方面"></a>索引不利的方面</h2><ul>
<li>创建索引和维护索引要耗费时间,这种时间随着数据量的增加而增加。</li>
<li>索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。</li>
<li>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。</li>
</ul>
<h2 id="哪些列适合创建索引"><a href="#哪些列适合创建索引" class="headerlink" title="哪些列适合创建索引"></a>哪些列适合创建索引</h2><ul>
<li>在经常需要<code>搜索</code>的列上；</li>
<li>在作为<code>主键</code>的列上，强制该列的唯一性和组织表中数据的排列结构；</li>
<li>在经常用在<code>连接</code>的列上，这些列主要是一些外键，可以加快连接的速度；</li>
<li>在经常需要根据<code>范围进行搜索</code>的列上创建索引，因为索引已经排序，其指定的范围是连续的；</li>
<li>在经常需要<code>排序</code>的列上创建索引，因为索引已经排序，这样查询可以利用索引的排序，加快排序查询时间；</li>
<li>在经常使用在<code>WHERE子句</code>中的列上面创建索引，加快条件的判断速度。</li>
</ul>
<h2 id="哪些列不适合创建索引"><a href="#哪些列不适合创建索引" class="headerlink" title="哪些列不适合创建索引"></a>哪些列不适合创建索引</h2><ul>
<li>对于那些在查询中<code>很少使用或者参考的列</code>不应该创建索引。</li>
<li>对于那些只有<code>很少数据值</code>的列也不应该增加索引。</li>
<li>对于那些定义为<code>text, image和bit数据类型</code>的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。</li>
<li>当<code>修改性能远远大于检索性能</code>时，不应该创建索引。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。</li>
</ul>
<h2 id="索引失效的情况"><a href="#索引失效的情况" class="headerlink" title="索引失效的情况"></a>索引失效的情况</h2><ul>
<li><code>IN/OR</code>字句</li>
<li><code>IS NULL</code>和<code>IS NOT NULL</code></li>
<li>使用<code>函数</code></li>
<li><code>类型转换</code></li>
<li>使用<code>后模糊</code> %XXX 不走索引, XXX%走索引</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Interview </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL </tag>
            
            <tag> Interview </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[learn RabbitMQ]]></title>
      <url>/2017/04/16/learn-mq-rabbitMQ/</url>
      <content type="html"><![CDATA[<h1 id="Exchange"><a href="#Exchange" class="headerlink" title="Exchange"></a>Exchange</h1><p><img src="/img/learn-mq-rabbitMQ/exchange.png" alt="exchange"></p>
<h1 id="RPC"><a href="#RPC" class="headerlink" title="RPC"></a>RPC</h1><p><img src="/img/learn-mq-rabbitMQ/rpc.png" alt="exchange"></p>
]]></content>
      
        <categories>
            
            <category> MQ </category>
            
        </categories>
        
        
        <tags>
            
            <tag> MQ </tag>
            
            <tag> RabbitMQ </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Java并发编程--同步]]></title>
      <url>/2017/04/12/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B--%E5%90%8C%E6%AD%A5/</url>
      <content type="html"><![CDATA[<h1 id="线程基础"><a href="#线程基础" class="headerlink" title="线程基础"></a>线程基础</h1><h2 id="Java线程状态图"><a href="#Java线程状态图" class="headerlink" title="Java线程状态图"></a>Java线程状态图</h2><p><img src="/img/Java并发编程/Java线程状态图.png" alt="可重入锁"><br><a href="https://my.oschina.net/mingdongcheng/blog/139263" target="_blank" rel="external">图片出处</a></p>
<h2 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h2><p>睡眠,放弃CPU使用,让其他线程去竞争CPU时间片.但是会持有锁.</p>
<h2 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h2><p>让步,放弃CPU使用,自己和其他进程一起参与竞争CPU时间片,会持有锁.</p>
<h2 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h2><p>释放锁并等待唤醒.如果没有设置等待时间或者,没有线程调用notify或notifyAll,那么该线程会一直在等待队列中.</p>
<h2 id="notify"><a href="#notify" class="headerlink" title="notify"></a>notify</h2><p>唤醒,唤醒某个等待该锁的线程.即使调用notify方法,也会等该线程退出临界区才释放锁并唤醒某个等待该锁的线程</p>
<h2 id="notifyAll"><a href="#notifyAll" class="headerlink" title="notifyAll"></a>notifyAll</h2><p>唤醒所有,唤醒所有等待该锁的线程,但是只要一个锁能竞争到锁,进入临界区.</p>
<h2 id="join"><a href="#join" class="headerlink" title="join"></a>join</h2><p>加入,假如在main线程中，调用thread.join方法，则main方法会等待thread线程执行完毕或者等待一定的时间。<br>如果调用的是无参join方法，则等待thread执行完毕，如果调用的是指定了时间参数的join方法，则等待指定的时间.</p>
<h2 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt"></a>interrupt</h2><p>中断,调用interrupt方法可以使得处于阻塞状态的线程抛出一个InterruptedException，<br>也就说，它可以用来中断一个正处于阻塞状态的线程;非阻塞的线程是无法被中断的.<br>另外，通过interrupt方法和isInterrupted()方法来停止正在运行的线程.</p>
<h2 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h2><p>保证线程的可见性.使用volatile必须具备以下2个条件：<br>    1)对变量的写操作不依赖于当前值.<br>    2)该变量没有包含在具有其他变量的不变式中</p>
<h1 id="可重入锁"><a href="#可重入锁" class="headerlink" title="可重入锁"></a>可重入锁</h1><p><img src="/img/Java并发编程/可重入锁.png" alt="可重入锁"></p>
<h1 id="同步器"><a href="#同步器" class="headerlink" title="同步器"></a>同步器</h1><p><img src="/img/Java并发编程/同步器.png" alt="同步器"></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[小算法练习]]></title>
      <url>/2017/04/09/%E5%B0%8F%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h1 id="链表翻转"><a href="#链表翻转" class="headerlink" title="链表翻转"></a>链表翻转</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">node *head;</div><div class="line"></div><div class="line">node *h=head;</div><div class="line">node *hn=head-&gt;next;</div><div class="line">node *hnn=hn-&gt;next;</div><div class="line"></div><div class="line">head-&gt;next =<span class="literal">NULL</span>;</div><div class="line"></div><div class="line"><span class="keyword">while</span>(hn != <span class="literal">NULL</span>)&#123;</div><div class="line">    hn-&gt;next =h;</div><div class="line">    h= hn;</div><div class="line">    hn = hnn;</div><div class="line">    hnn = hnn-&gt;next;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="/img/小算法练习/链表翻转示意图.jpg" alt="链表翻转"></p>
<h1 id="求集合的所有子集"><a href="#求集合的所有子集" class="headerlink" title="求集合的所有子集"></a>求集合的所有子集</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 解题思路: 个数为n的集合,子集的个数为(2^n-1)个.</div><div class="line"> * 以[1...(2^n)]的二进制数表示是否选取集合的元素:1为选取,0为不选.</div><div class="line"> * 例子:</div><div class="line"> * set = [a,b,c] , 子集个数为 2^3-1 = 7</div><div class="line"> * [1...7]的二进制表示分别为:</div><div class="line"> * 001,010,011,100,101,110,111</div><div class="line"> * 001 --&gt; [a]</div><div class="line"> * 010 --&gt; [b]</div><div class="line"> * 011 --&gt; [a,b]</div><div class="line"> * 100 --&gt; [c]</div><div class="line"> * ....</div><div class="line"> * 111 --&gt; [a,b,c]</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getSubset</span><span class="params">(<span class="keyword">char</span> set[])</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> length = set.length;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; (<span class="number">1</span> &lt;&lt; length); i++) &#123;</div><div class="line">        System.out.print(<span class="string">"["</span>);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; length; j++) &#123;</div><div class="line">            <span class="keyword">if</span> ((i &amp; (<span class="number">1</span> &lt;&lt; j)) != <span class="number">0</span>) &#123;</div><div class="line">                System.out.print(set[j]);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.print(<span class="string">"] "</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="x-amp-x-1-始终为零-求x是哪类数"><a href="#x-amp-x-1-始终为零-求x是哪类数" class="headerlink" title="x&amp;(x-1)始终为零, 求x是哪类数"></a>x&amp;(x-1)始终为零, 求x是哪类数</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// x 是 2^n</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">31</span>; j++) &#123;</div><div class="line">    <span class="keyword">int</span> r = (<span class="number">1</span>&lt;&lt;j) &amp; (<span class="number">1</span>&lt;&lt;j -<span class="number">1</span>);</div><div class="line">    System.out.println(r);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> Algorithm </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Algorithm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[learn-java-NIO]]></title>
      <url>/2017/04/08/learn-java-NIO/</url>
      <content type="html"><![CDATA[<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://ifeve.com/overview/" target="_blank" rel="external">http://ifeve.com/overview/</a></p>
<h1 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h1><p><img src="/img/learn-java-NIO/buffer.png" alt="Buffer"></p>
<h1 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a>Channel</h1><p><img src="/img/learn-java-NIO/channel.png" alt="Channel"></p>
<h1 id="Selector"><a href="#Selector" class="headerlink" title="Selector"></a>Selector</h1><p><img src="/img/learn-java-NIO/selector-channel.png" alt="Selector-Channel"></p>
<p><img src="/img/learn-java-NIO/selector.png" alt="Selector"></p>
<h1 id="Pipe"><a href="#Pipe" class="headerlink" title="Pipe"></a>Pipe</h1><p><img src="/img/learn-java-NIO/pipe.png" alt="Pipe"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> NIO </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[learn-jvm-3-垃圾回收]]></title>
      <url>/2017/03/09/learn-jvm-3-%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
      <content type="html"><![CDATA[<h1 id="何时进行回收"><a href="#何时进行回收" class="headerlink" title="何时进行回收"></a>何时进行回收</h1><p>一般来说，当某个区域内存不够的时候就会进行垃圾收集</p>
<h1 id="如何判断一块内存是垃圾"><a href="#如何判断一块内存是垃圾" class="headerlink" title="如何判断一块内存是垃圾?"></a>如何判断一块内存是垃圾?</h1><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><p>当有对象引用自身时，就会计数器加1，删除一个引用就减一，当计数为0时即可判断为垃圾.<br>存在的问题:引用计数存在循环引用问题</p>
<h2 id="可达性分析-根搜索算法"><a href="#可达性分析-根搜索算法" class="headerlink" title="可达性分析(根搜索算法)"></a>可达性分析(根搜索算法)</h2><p>通过一些根节点开始，分析引用链，没有被引用的对象都可以被标记为垃圾对象。<br>JVM普遍采用该算法</p>
<h3 id="GC-Roots"><a href="#GC-Roots" class="headerlink" title="GC Roots"></a>GC Roots</h3><p>Java虚拟机将以下对象定义为 GC Roots:</p>
<ul>
<li>Java虚拟机栈中引用的对象：比如方法里面定义这种局部变量 User user= new User();</li>
<li>静态属性引用的对象：比如 private static User user = new User();</li>
<li>常量引用的对象：比如 private static final  User user = new User();</li>
<li>本地方法栈中引用的对象</li>
</ul>
<h3 id="引用链不可达标记"><a href="#引用链不可达标记" class="headerlink" title="引用链不可达标记"></a>引用链不可达标记</h3><p>即便引用链不可达，也并不意味着该对象一定会被回收，因为回收要经历<strong>两次标记</strong>过程！<br><strong>第一次标记</strong>：对象进行根搜索之后，如果发现没有与GC Roots 相连接的引用链，就会被第一次标记并进行筛选。所谓筛选，就是检查此对象是否有必要执行finalize方法，如果对象定义了该方法并且没有执行过。那么该对象就会被放入到一个队列F-Queue，随后会有一个低优先级的线程去执行这个队列里面对象的finalize方法<br><strong>第二次标记</strong>：JVM 将对F-Queue队列里面的对象进行第二次标记。如果对象不想被回收，那么就得在finalize方法里面拯救自己，否则，这些对象就真的会被回收</p>
<hr>
<h1 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h1><h2 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h2><p>对非垃圾对象进行标记，清除其他的对象。<br>存在的问题:这种方式对对内存空间造成空隙，即内存碎片，最终导致有空余空间，但没有连续的足够大小的空间分配内存。</p>
<h2 id="标记整理"><a href="#标记整理" class="headerlink" title="标记整理"></a>标记整理</h2><p>标记非垃圾对象后，将这些对象整理好，依次排列内存。<br>存在的问题:这样内存就是整齐的了。但是因为会造成对象移动，所以效率会有降低。~</p>
<h2 id="标记清除整理"><a href="#标记清除整理" class="headerlink" title="标记清除整理"></a>标记清除整理</h2><p>即组合<code>标记清除</code>和<code>标记整理</code>两种方式，在若干次清除后进行一次整理。</p>
<h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><p>划分成两个相同大小的区域，收集时，将第一个区域的活对象复制到另一个区域.<br>这样不会有内存碎片问题。但是最多只能存放一半内存,而且所有的活对象都需要拷贝。<br>将内存分为一块较大的eden空间和2块较少的survivor空间，<br>每次使用eden和其中一块survivor，<br>当回收时将eden和 survivor还存活的对象一次过拷贝到另外一块survivor空间上，<br>然后清理掉eden和用过的survivor。<br>Sun Hotspot虚拟机默认eden和survivor的大小比例是8:1，也就是每次只有10%的内存是“浪费”的。</p>
<h2 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h2><ul>
<li>对于新生代的对象回收,使用复制算法</li>
<li>对于老年代的对象回收,使用标记-清除算法</li>
</ul>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> jvm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[learn-jvm-4-类加载]]></title>
      <url>/2017/03/08/learn-jvm-4-%E7%B1%BB%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h1 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h1><p><img src="/img/learn-jvm-4/1.加载.png" alt="加载"></p>
<h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><p><img src="/img/learn-jvm-4/2.验证.png" alt="加载"></p>
<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p><img src="/img/learn-jvm-4/3.准备.png" alt="加载"></p>
<h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><p><img src="/img/learn-jvm-4/4.解析.png" alt="加载"></p>
<h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p><img src="/img/learn-jvm-4/5.初始化.png" alt="加载"></p>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1>]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> jvm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[learn-jvm-2-BTrace初探]]></title>
      <url>/2017/03/08/learn-jvm-2-BTrace%E5%88%9D%E6%8E%A2/</url>
      <content type="html"><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://calvin1978.blogcn.com/articles/btrace1.html" target="_blank" rel="external">Btrace入门到熟练小工完全指南</a></li>
<li><a href="https://github.com/btraceio/btrace" target="_blank" rel="external">git - BTrace</a></li>
</ul>
<h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><ul>
<li>jdk 1.8</li>
<li>jvisualvm 安装BTrace插件</li>
<li>Atom 用来写BTrace脚本,别用写字板写</li>
<li>BTrace的基本知识参考<a href="http://calvin1978.blogcn.com/articles/btrace1.html" target="_blank" rel="external">Btrace入门到熟练小工完全指南</a></li>
</ul>
<h1 id="计算方法调用过程时间"><a href="#计算方法调用过程时间" class="headerlink" title="计算方法调用过程时间"></a>计算方法调用过程时间</h1><p>利用@Duration来获取方法调用时间, 顺便验证Array和HashMap在较少量数据下,哪个容器查找更快.</p>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BtraceDuration</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> size = <span class="number">400</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[size];</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</div><div class="line">            map.put(i, i);</div><div class="line">            arr[i] = i;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">findInMap</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> map.get(v) != <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">findInArr</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</div><div class="line">            <span class="keyword">if</span> (i == v) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</div><div class="line">        <span class="keyword">int</span> input;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            input = scanner.nextInt(); <span class="comment">// 用于阻塞程序,便于观察</span></div><div class="line">            findInArr(input);</div><div class="line">            findInMap(input);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="BTrace代码"><a href="#BTrace代码" class="headerlink" title="BTrace代码"></a>BTrace代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.sun.btrace.annotations.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.sun.btrace.BTraceUtils.*;</div><div class="line"></div><div class="line"><span class="meta">@BTrace</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TracingScript</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="meta">@OnMethod</span>(clazz = <span class="string">"/cn.stq.learn.jvm.btrace\\..*/"</span>, method = <span class="string">"/find.*/"</span>, location = <span class="meta">@Location</span>(Kind.RETURN))</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testDuration</span><span class="params">(@ProbeClassName String pcn,@ProbeMethodName String pmn,  @Duration <span class="keyword">long</span> duration, @Return <span class="keyword">boolean</span> result)</span> </span>&#123;</div><div class="line">    <span class="comment">// duration 是纳秒,除以1000000得毫秒</span></div><div class="line">    print(strcat(pcn,<span class="string">"#"</span>));</div><div class="line">    print(strcat(pmn, <span class="string">": "</span>));</div><div class="line">    print(strcat(str(duration), <span class="string">"ns  "</span>));</div><div class="line">    println(strcat(<span class="string">"result-&gt;"</span>, str(result)));</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><p><img src="/img/learn-jvm-2/Duration.png" alt="Duration"></p>
<hr>
<h1 id="谁调用了这个函数"><a href="#谁调用了这个函数" class="headerlink" title="谁调用了这个函数"></a>谁调用了这个函数</h1><h2 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h2><p>见<strong><em>计算方法调用过程时间</em></strong>的测试代码</p>
<h2 id="BTrace代码-1"><a href="#BTrace代码-1" class="headerlink" title="BTrace代码"></a>BTrace代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.sun.btrace.annotations.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.sun.btrace.BTraceUtils.*;</div><div class="line"></div><div class="line"><span class="meta">@BTrace</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TracingScript</span> </span>&#123;</div><div class="line">  <span class="meta">@OnMethod</span>(clazz = <span class="string">"/cn.stq.learn.jvm.btrace\\..*/"</span>, method = <span class="string">"/find.*/"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testInvokeStack</span><span class="params">(@ProbeClassName String pcn,@ProbeMethodName String pmn, <span class="keyword">int</span> param)</span> </span>&#123;</div><div class="line">    print(strcat(pcn,<span class="string">"#"</span>));</div><div class="line">    println(strcat(pmn, <span class="string">""</span>));</div><div class="line">    println(strcat(<span class="string">"param:"</span>, str(param)));</div><div class="line">    jstack(); <span class="comment">// 打印调用栈</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><p><img src="/img/learn-jvm-2/invoke-stack.png" alt="invoke stack"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> jvm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[learn-jvm-1-内存分配与回收策略实战]]></title>
      <url>/2017/03/08/learn-jvm-1-%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E4%B8%8E%E5%9B%9E%E6%94%B6%E7%AD%96%E7%95%A5%E5%AE%9E%E6%88%98/</url>
      <content type="html"><![CDATA[<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul>
<li><a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/gc01/index.html#t3" target="_blank" rel="external">Java Garbage Collection Basics</a></li>
<li><a href="http://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html" target="_blank" rel="external">JVM参数释义</a></li>
</ul>
<h1 id="Debug环境"><a href="#Debug环境" class="headerlink" title="Debug环境"></a>Debug环境</h1><p>笔者是在IDEA + jvm调试工具环境下调试.</p>
<ul>
<li><p>虚拟机启动参数配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">-XX：+PrintGCDetails  --虚拟机在发生垃圾收集行为时打印内存回收日志，并且在进程退出的时候输出当前的内存各区域分配情况。</div><div class="line">-Xms20M  --初始堆大小</div><div class="line">-Xmx20M  --最大堆大小</div><div class="line">-Xmn10M  --年轻代大小</div><div class="line">-XX:+UseSerialGC --指定垃圾回收器为串行垃圾回收器</div><div class="line">-XX:PretenureSizeThreshold=3145728  --超过阀值(3MB)直接分配到老年代,只对Serial和ParNew两款收集器有效</div></pre></td></tr></table></figure>
</li>
<li><p>常用调试命令</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">查看虚拟机唯一ID(Local Virtual Machine Identifier,LVMID),通常情况下与进程ID是一个值</div><div class="line">&gt; jps</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">查看堆栈信息</div><div class="line">&gt; jmap</div><div class="line">&gt; jmap -heap $LVMID  //查看堆内存</div><div class="line">&gt; jmap -dump:format=b,file=xx.bin  $LVMID  //生成dump文件, 可用jhat命令分析生成的内存镜像文件</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">查看堆栈内存变化信息</div><div class="line">&gt; jstat</div><div class="line">&gt; jstat -gcutil -h 20 $LVMID 500 1000     // (每隔20行显示表头,每隔500ms显示一次,一共显示1000次)</div><div class="line">option 可选</div><div class="line">    -gcnew</div><div class="line">    -gcnewcapacity</div><div class="line">    -gcold</div><div class="line">    -gcoldcapacity</div><div class="line">    -gcpermcapacity</div><div class="line">    -gcutil</div><div class="line">表头含义(https://docs.oracle.com/javase/8/docs/technotes/tools/unix/jstat.html)</div><div class="line">-gcutil option</div><div class="line">Summary of garbage collection statistics.</div><div class="line">S0: Survivor space 0 utilization as a percentage of the space&apos;s current capacity.</div><div class="line">S1: Survivor space 1 utilization as a percentage of the space&apos;s current capacity.</div><div class="line">E: Eden space utilization as a percentage of the space&apos;s current capacity.</div><div class="line">O: Old space utilization as a percentage of the space&apos;s current capacity.</div><div class="line">M: Metaspace utilization as a percentage of the space&apos;s current capacity.</div><div class="line">CCS: Compressed class space utilization as a percentage.</div><div class="line">YGC: Number of young generation GC events.</div><div class="line">YGCT: Young generation garbage collection time.</div><div class="line">FGC: Number of full GC events.</div><div class="line">FGCT: Full garbage collection time.</div><div class="line">GCT: Total garbage collection time.</div></pre></td></tr></table></figure>
<h1 id="内存分配与回收策略"><a href="#内存分配与回收策略" class="headerlink" title="内存分配与回收策略"></a>内存分配与回收策略</h1><h2 id="对象优先在Eden分配"><a href="#对象优先在Eden分配" class="headerlink" title="对象优先在Eden分配"></a>对象优先在Eden分配</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAllocation</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 测试垃圾回收</div><div class="line">     * jvm添加参数:-Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails</div><div class="line">     * -Xms20M  --初始堆大小</div><div class="line">     * -Xmx20M  --最大堆大小</div><div class="line">     * -Xmn10M  --年轻代大小</div><div class="line">     * 这3个参数限制了Java堆大小为20MB,不可扩展,其中10MB分配给新生代,剩下的10MB分配给老年代。</div><div class="line">     * -XX:SurvivorRatio=8  决定了新生代中Eden区与一个Survivor区的空间比例是8:1</div><div class="line">     * -XX:+PrintGCDetails  告诉虚拟机在发生垃圾收集行为时打印内存回收日志，并且在进程退出的时候输出当前的内存各区域分配情况。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_3_6_1</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] a1 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</div><div class="line">        <span class="keyword">byte</span>[] a2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</div><div class="line">        <span class="keyword">byte</span>[] a3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</div><div class="line">        <span class="keyword">byte</span>[] a4 = <span class="keyword">new</span> <span class="keyword">byte</span>[_1MB &gt;&gt; <span class="number">1</span>];</div><div class="line">        a1 = <span class="keyword">null</span>;</div><div class="line">        a2 = <span class="keyword">null</span>;</div><div class="line">        a3 = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">byte</span>[] a5 = <span class="keyword">new</span> <span class="keyword">byte</span>[_1MB &gt;&gt; <span class="number">2</span>];<span class="comment">//第一次发生Minor GC (YGC)</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        test_3_6_1();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调试到第一次发生YGC的地方,GC导致的内存占用变化如下图所示.<br><img src="/img/learn-jvm-1/firstYGC.png" alt="YGC"></p>
<h2 id="直接分配大对象到老年代"><a href="#直接分配大对象到老年代" class="headerlink" title="直接分配大对象到老年代"></a>直接分配大对象到老年代</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_3_6_2</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 测试直接分配大对象到老年代</div><div class="line">     * jvm添加参数:-Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:+UseSerialGC -XX:PretenureSizeThreshold=3145728</div><div class="line">     * -Xms20M  --初始堆大小</div><div class="line">     * -Xmx20M  --最大堆大小</div><div class="line">     * -Xmn10M  --年轻代大小</div><div class="line">     * -XX:+UseSerialGC --指定垃圾回收器为串行垃圾回收器</div><div class="line">     * -XX:PretenureSizeThreshold=3145728  --超过阀值(3MB)直接分配到老年代,只对Serial和ParNew两款收集器有效</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_3_6_2</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4</span>* _1MB]; <span class="comment">//直接分配到老年代</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        test_3_6_2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内存占用变化如下图所示.<br><img src="/img/learn-jvm-1/allocateToOldGeneration.png" alt="YGC"></p>
<h2 id="长期存活的对象进入老年代"><a href="#长期存活的对象进入老年代" class="headerlink" title="长期存活的对象进入老年代"></a>长期存活的对象进入老年代</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_3_6_3</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 测试长期存活的对象进入老年代</div><div class="line">     * jvm添加参数:-Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:MaxTenuringThreshold=1 -XX:+PrintTenuringDistribution</div><div class="line">     * -Xms20M  --初始堆大小</div><div class="line">     * -Xmx20M  --最大堆大小</div><div class="line">     * -Xmn10M  --年轻代大小</div><div class="line">     * -XX:MaxTenuringThreshold=1 -- 对象转移到老年代阀值(每次垃圾回收对象age+1,age大于阀值时对象被移到老年代中)</div><div class="line">     * -XX:+PrintTenuringDistribution</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_3_6_3</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] a1 = <span class="keyword">new</span> <span class="keyword">byte</span>[_1MB &gt;&gt; <span class="number">2</span>];</div><div class="line">        <span class="keyword">byte</span>[] a2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</div><div class="line">        <span class="keyword">byte</span>[] a3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</div><div class="line">        <span class="keyword">byte</span>[] a4 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</div><div class="line">        a2 = <span class="keyword">null</span>;</div><div class="line">        a3 = <span class="keyword">null</span>;</div><div class="line">        a4 = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        a2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];<span class="comment">//第1次YGC</span></div><div class="line">        a3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</div><div class="line">        a4 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];</div><div class="line">        a2 = <span class="keyword">null</span>;</div><div class="line">        a3 = <span class="keyword">null</span>;</div><div class="line">        a4 = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        a2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];<span class="comment">//第2次YGC,a1被移到老年代</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        test_3_6_3();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内存占用变化如下图所示.<br><img src="/img/learn-jvm-1/ageToOldGenerationMemory.png" alt="ageToOld"></p>
<p>第2次YDC后堆内存信息<br><img src="/img/learn-jvm-1/ageToOldGenerationHeap.png" alt="ageToOld"></p>
<h2 id="动态对象年龄判定"><a href="#动态对象年龄判定" class="headerlink" title="动态对象年龄判定"></a>动态对象年龄判定</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_3_6_4</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 测试动态对象年龄判定</div><div class="line">     *</div><div class="line">     * 为了能更好地适应不同程序的内存状况，</div><div class="line">     * 虚拟机并不是永远地要求对象的年龄必须达到了MaxTenuringThreshold才能晋升老年代，</div><div class="line">     * 如果在Survivor空间中相同年龄所有对象大小的总和大于Survivor空间的一半，</div><div class="line">     * 年龄大于或等于该年龄的对象就可以直接进入老年代，</div><div class="line">     * 无须等到MaxTenuringThreshold中要求的年龄。</div><div class="line">     *</div><div class="line">     * jvm添加参数:-Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails -XX:MaxTenuringThreshold=15 -XX:+PrintTenuringDistribution</div><div class="line">     * -Xms20M  --初始堆大小</div><div class="line">     * -Xmx20M  --最大堆大小</div><div class="line">     * -Xmn10M  --年轻代大小</div><div class="line">     * -XX:MaxTenuringThreshold=1 -- 对象转移到老年代阀值(每次垃圾回收对象age+1,age大于阀值时对象被移到老年代中)</div><div class="line">     * -XX:+PrintTenuringDistribution</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_3_6_4</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] a1 = <span class="keyword">new</span> <span class="keyword">byte</span>[_1MB &gt;&gt; <span class="number">2</span>];</div><div class="line">        <span class="keyword">byte</span>[] a2 = <span class="keyword">new</span> <span class="keyword">byte</span>[_1MB &gt;&gt; <span class="number">2</span>];<span class="comment">//a1+a2大于survivo空间一半</span></div><div class="line">        <span class="keyword">byte</span>[] a3 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">3</span> * _1MB];</div><div class="line">        <span class="keyword">byte</span>[] a4 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">3</span> * _1MB];</div><div class="line">        a4 = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">byte</span>[] a5 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span> * _1MB];<span class="comment">//此时发生YGC, a1+a2 --&gt; S0, a3 --&gt; old</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        test_3_6_4();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内存占用变化如下图所示.<br><img src="/img/learn-jvm-1/maxTenuringThreshold.png" alt="ageToOld"></p>
<h2 id="空间分配担保"><a href="#空间分配担保" class="headerlink" title="空间分配担保"></a>空间分配担保</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test_3_6_5</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> _1MB = <span class="number">1024</span> * <span class="number">1024</span>;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 测试空间分配担保</div><div class="line">     *</div><div class="line">     * 当出现大量对象在Minor GC后仍然存活的情况（最极端的情况就是内存回收后新生代中所有对象都存活），</div><div class="line">     * 就需要老年代进行分配担保，把Survivor无法容纳的对象直接进入老年代.</div><div class="line">     *</div><div class="line">     * jvm添加参数:-Xms20M -Xmx20M -Xmn10M -XX:+PrintGCDetails</div><div class="line">     * -Xms20M  --初始堆大小</div><div class="line">     * -Xmx20M  --最大堆大小</div><div class="line">     * -Xmn10M  --年轻代大小</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test_3_6_5</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] a1 = <span class="keyword">new</span> <span class="keyword">byte</span>[ <span class="number">4</span> * _1MB ];</div><div class="line">        <span class="keyword">byte</span>[] a2 = <span class="keyword">new</span> <span class="keyword">byte</span>[ <span class="number">4</span> * _1MB ];</div><div class="line">        <span class="keyword">byte</span>[] a3 = <span class="keyword">new</span> <span class="keyword">byte</span>[ <span class="number">3</span> * _1MB];<span class="comment">//没有GC, 直接在老年代分配空间给a3</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        test_3_6_5();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>内存占用变化如下图所示.<br><img src="/img/learn-jvm-1/allocateToOld.png" alt="ageToOld"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> jvm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[learn-jvm-0-运行时数据区域]]></title>
      <url>/2017/03/08/learn-jvm-0-%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F/</url>
      <content type="html"><![CDATA[<p><img src="/img/learn-jvm-0/Hotspot_Architecture.png" alt="Hotspot"></p>
<h1 id="共享数据区域"><a href="#共享数据区域" class="headerlink" title="共享数据区域"></a>共享数据区域</h1><p><img src="/img/learn-jvm-0/share.png" alt="share"></p>
<h2 id="Method-Area"><a href="#Method-Area" class="headerlink" title="Method Area"></a><em>Method Area</em></h2><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然Java虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做Non-Heap（非堆），目的应该是与Java堆区分开来.<br>对于习惯在HotSpot虚拟机上开发、部署程序的开发者来说，很多人都更愿意把方法区称为“永久代”（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot虚拟机的设计团队选择把GC分代收集扩展至方法区，或者说使用永久代来实现方法区而已，这样HotSpot的垃圾收集器可以像管理Java堆一样管理这部分内存，能够省去专门为方法区编写内存管理代码的工作。</p>
<h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a><em>运行时常量池</em></h3><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。<br>运行时常量池相对于Class文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入Class文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是String类的intern（）方法。</p>
<h2 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a><em>Heap</em></h2><p>Java堆（Java Heap）是Java虚拟机所管理的内存中最大的一块。Java堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。<br>所有的对象实例以及数组都要在堆上分配[1]，但是随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换[2]优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。<br>Java堆是<strong>垃圾收集器管理</strong>的主要区域，因此很多时候也被称做“GC堆”.</p>
<hr>
<h1 id="线程私有数据区域"><a href="#线程私有数据区域" class="headerlink" title="线程私有数据区域"></a>线程私有数据区域</h1><p><img src="/img/learn-jvm-0/private.png" alt="private"></p>
<h2 id="PC"><a href="#PC" class="headerlink" title="PC"></a><em>PC</em></h2><p>程序计数器（Program Counter Register）是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。<br>在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。<br>由于Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。<br>因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个<strong>独立的程序计数器</strong>，各条线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</p>
<h2 id="VM-Stack"><a href="#VM-Stack" class="headerlink" title="VM Stack"></a><em>VM Stack</em></h2><p>虚拟机栈描述的是Java方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧（Stack Frame[1]）用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。<br>局部变量表存放了编译期可知的各种基本数据类型（boolean、byte、char、short、int、float、long、double）、对象引用（reference类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。<br>其中64位长度的long和double类型的数据会占用2个局部变量空间（Slot），其余的数据类型只占用1个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。<br>在Java虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；如果虚拟机栈可以动态扩展（当前大部分的Java虚拟机都可动态扩展，只不过Java虚拟机规范中也允许固定长度的虚拟机栈），如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</p>
<h2 id="Native-Method-Stack"><a href="#Native-Method-Stack" class="headerlink" title="Native Method Stack"></a><em>Native Method Stack</em></h2><p>本地方法栈（Native Method Stack）与虚拟机栈所发挥的作用是非常相似的，它们之间的区别不过是虚拟机栈为虚拟机执行Java方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的Native方法服务。</p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
            <tag> jvm </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[PL/SQL基础]]></title>
      <url>/2017/03/07/learn-pl-sql/</url>
      <content type="html"><![CDATA[<h1 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> students;</div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> students</div><div class="line">(</div><div class="line">  <span class="keyword">ID</span> <span class="built_in">int</span>,</div><div class="line">  userName <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line">  userPass <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line">  userAge  <span class="built_in">int</span></div><div class="line">);</div><div class="line"><span class="comment">-- 插入10条</span></div><div class="line"><span class="keyword">DECLARE</span></div><div class="line">	i <span class="built_in">number</span>(<span class="number">2</span>);</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.10</span> <span class="keyword">loop</span></div><div class="line">		<span class="keyword">INSERT</span> <span class="keyword">INTO</span> students <span class="keyword">VALUES</span>(i,<span class="string">'jack'</span>||i,<span class="string">'jj'</span>,<span class="number">20</span>+i);</div><div class="line">	<span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line"><span class="keyword">END</span>;</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> students;</div></pre></td></tr></table></figure>
<h1 id="语法基础"><a href="#语法基础" class="headerlink" title="语法基础"></a>语法基础</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span></div><div class="line">	i <span class="built_in">number</span>(<span class="number">1</span>) := <span class="number">5</span>;</div><div class="line">	j number(2) := 10;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">	<span class="keyword">if</span> i &lt; <span class="number">5</span> <span class="keyword">then</span></div><div class="line">		DBMS_OUTPUT.PUT_LINE(<span class="string">'i&lt;5'</span>);</div><div class="line">	elsif i=5 then</div><div class="line">		DBMS_OUTPUT.PUT_LINE('i=5');</div><div class="line">	else</div><div class="line">		DBMS_OUTPUT.PUT_LINE('i=5');</div><div class="line">	<span class="keyword">end</span> <span class="keyword">if</span>;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<h2 id="case-when"><a href="#case-when" class="headerlink" title="case when"></a>case when</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">DECLARE</div><div class="line">	i number(1) := 5;</div><div class="line">	j number(2);</div><div class="line">BEGIN</div><div class="line">	j:=</div><div class="line">	case i</div><div class="line">		when 0 then 0</div><div class="line">		when 5 then 5</div><div class="line">		else 10</div><div class="line">	end;</div><div class="line">	DBMS_OUTPUT.PUT_LINE(j);</div><div class="line"></div><div class="line">	j :=</div><div class="line">	case</div><div class="line">		when i &lt; 5 then 0</div><div class="line">		when i=5 then 6</div><div class="line">		else 10</div><div class="line">	end;</div><div class="line">	DBMS_OUTPUT.PUT_LINE(j);</div><div class="line">END;</div></pre></td></tr></table></figure>
<h2 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span></div><div class="line">	i <span class="built_in">number</span>(<span class="number">1</span>) := <span class="number">0</span>;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">	<span class="keyword">loop</span></div><div class="line">		i := i + <span class="number">1</span>;</div><div class="line">		DBMS_OUTPUT.PUT_LINE(i);</div><div class="line">		exit when i = 5;</div><div class="line">	<span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span></div><div class="line">	i <span class="built_in">number</span>(<span class="number">2</span>) := <span class="number">0</span>;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">	<span class="keyword">while</span> i &lt; <span class="number">10</span> <span class="keyword">loop</span></div><div class="line">		DBMS_OUTPUT.PUT_LINE(i);</div><div class="line">		i := i + 1;</div><div class="line">	<span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<h2 id="for-in"><a href="#for-in" class="headerlink" title="for..in"></a>for..in</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">BEGIN</span></div><div class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0.</span><span class="number">.9</span> <span class="keyword">loop</span></div><div class="line">		DBMS_OUTPUT.PUT_LINE(i);</div><div class="line">	<span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<h2 id="goto"><a href="#goto" class="headerlink" title="goto"></a>goto</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">DECLARE</div><div class="line">	i number(2) := 0;</div><div class="line">	j number(2) := 0;</div><div class="line">BEGIN</div><div class="line">	for j in 0..9 loop</div><div class="line">		i := i + 1;</div><div class="line">		if i=5 then</div><div class="line">			goto EXIT_LOOP;</div><div class="line">		end if;</div><div class="line">	end loop;</div><div class="line">	&lt;&lt;EXIT_LOOP&gt;&gt;</div><div class="line">	DBMS_OUTPUT.PUT_LINE(i);</div><div class="line">END;</div></pre></td></tr></table></figure>
<h1 id="获取插入语句的返回值-可以获取增删改返回的数据"><a href="#获取插入语句的返回值-可以获取增删改返回的数据" class="headerlink" title="获取插入语句的返回值. 可以获取增删改返回的数据"></a>获取插入语句的返回值. 可以获取增删改返回的数据</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span></div><div class="line">	row_id <span class="keyword">ROWID</span>;</div><div class="line">	info VARCHAR2(200);</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">	<span class="keyword">INSERT</span> <span class="keyword">INTO</span> students <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">'jack'</span>,<span class="string">'jj'</span>,<span class="number">23</span>)</div><div class="line">	<span class="keyword">returning</span> <span class="keyword">rowid</span>,to_char(<span class="keyword">ID</span>)||<span class="string">':'</span>||userName</div><div class="line">	<span class="keyword">INTO</span> row_id,info;</div><div class="line">	DBMS_OUTPUT.PUT_LINE('rowid:'||row_id);</div><div class="line">	DBMS_OUTPUT.PUT_LINE('name:'||info);</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<h1 id="自定数据类型"><a href="#自定数据类型" class="headerlink" title="自定数据类型"></a>自定数据类型</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span></div><div class="line">	<span class="keyword">TYPE</span> RECORD_TYPE_PERSON_AGE <span class="keyword">IS</span> <span class="built_in">RECORD</span>(</div><div class="line">		uName <span class="built_in">varchar</span>(<span class="number">100</span>),</div><div class="line">		age students.userAge%<span class="keyword">TYPE</span>	<span class="comment">--用%TYPE 类型定义与表相配的字段</span></div><div class="line">	);</div><div class="line">	userRec RECORD_TYPE_PERSON_AGE;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">	<span class="keyword">SELECT</span> userName,userAge <span class="keyword">INTO</span> userRec <span class="keyword">from</span> STUDENTS <span class="keyword">where</span> <span class="keyword">ID</span>=<span class="number">1</span>;</div><div class="line">	userRec.uName := 'changed';</div><div class="line">	DBMS_OUTPUT.PUT_LINE(userRec.uName||' '||userRec.age);</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<h1 id="数组类型"><a href="#数组类型" class="headerlink" title="数组类型"></a>数组类型</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span></div><div class="line">	 <span class="comment">--定义一个最多保存5个VARCHAR(25)数据类型成员的VARRAY数据类型</span></div><div class="line">   <span class="keyword">TYPE</span> reg_varray_type <span class="keyword">IS</span> <span class="keyword">VARRAY</span>(<span class="number">5</span>) <span class="keyword">OF</span> <span class="built_in">VARCHAR</span>(<span class="number">25</span>);</div><div class="line">   v_reg_varray REG_VARRAY_TYPE;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">	 <span class="comment">--用构造函数语法赋予初值</span></div><div class="line">   v_reg_varray := reg_varray_type(<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>);</div><div class="line"></div><div class="line">   DBMS_OUTPUT.PUT_LINE(v_reg_varray(1)||','</div><div class="line">                    ||v_reg_varray(2)||','</div><div class="line">                    ||v_reg_varray(3)||','</div><div class="line">                    ||v_reg_varray(4));</div><div class="line">   DBMS_OUTPUT.PUT_LINE(v_reg_varray(5));</div><div class="line">	<span class="comment">--用构造函数语法赋予初值后就可以这样对成员赋值</span></div><div class="line">   v_reg_varray(5) := 'xx';</div><div class="line">   DBMS_OUTPUT.PUT_LINE('5th is '||v_reg_varray(5));</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<h1 id="行类型-使用-ROWTYPE"><a href="#行类型-使用-ROWTYPE" class="headerlink" title="行类型, 使用%ROWTYPE"></a>行类型, 使用%ROWTYPE</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span></div><div class="line">    vId students.ID%<span class="keyword">TYPE</span> := <span class="number">1</span>; <span class="comment">-- 属性类型引用</span></div><div class="line">    rec students%ROWTYPE;	<span class="comment">--行类型</span></div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">    <span class="keyword">SELECT</span> * <span class="keyword">INTO</span> rec <span class="keyword">FROM</span> students <span class="keyword">where</span> <span class="keyword">ID</span>=vId;</div><div class="line">    DBMS_OUTPUT.PUT_LINE('姓名:'||rec.userName||' 年龄:'||rec.userAge);</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<h1 id="定义表类型-使用-TABLE"><a href="#定义表类型-使用-TABLE" class="headerlink" title="定义表类型, 使用 TABLE"></a>定义表类型, 使用 TABLE</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span></div><div class="line">	<span class="keyword">TYPE</span> TABLE_STUDENTS <span class="keyword">IS</span> <span class="keyword">TABLE</span> <span class="keyword">OF</span> STUDENTS%ROWTYPE <span class="keyword">INDEX</span> <span class="keyword">BY</span> BINARY_INTEGER;</div><div class="line">	recs_students TABLE_STUDENTS;</div><div class="line">	loop_count number(1) := 2;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">	<span class="keyword">FOR</span> i <span class="keyword">IN</span> <span class="number">1.</span>.loop_count <span class="keyword">LOOP</span></div><div class="line">		<span class="keyword">SELECT</span> * <span class="keyword">into</span> recs_students(i) <span class="keyword">from</span> STUDENTS <span class="keyword">where</span> <span class="keyword">id</span>=i;</div><div class="line">	<span class="keyword">END</span> <span class="keyword">LOOP</span>;</div><div class="line">	FOR j IN recs_students.FIRST..recs_students.LAST LOOP</div><div class="line">		DBMS_OUTPUT.PUT_LINE(recs_students(j).userName||' '||recs_students(j).ID);</div><div class="line">	<span class="keyword">END</span> <span class="keyword">LOOP</span>;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1><h2 id="游标基础"><a href="#游标基础" class="headerlink" title="游标基础"></a>游标基础</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> Cursor_name%FOUND     布尔型属性，当最近一次提取游标操作FETCH成功则为 TRUE,否则为FALSE；</div><div class="line"> Cursor_name%NOTFOUND   布尔型属性，与%FOUND相反；</div><div class="line"> Cursor_name%ISOPEN     布尔型属性，当游标已打开时返回 TRUE；</div><div class="line"> Cursor_name%ROWCOUNT   数字型属性，返回已从游标中读取的记录数。</div><div class="line">*/</div><div class="line"><span class="keyword">DECLARE</span></div><div class="line">	<span class="keyword">cursor</span> some_stu_cursor <span class="keyword">is</span> <span class="keyword">SELECT</span> <span class="keyword">ID</span>,userName <span class="keyword">from</span> students;</div><div class="line">	userId students.ID%TYPE;</div><div class="line">	userName students.userName%TYPE;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">	<span class="keyword">open</span> some_stu_cursor;</div><div class="line">		loop</div><div class="line">			fetch some_stu_cursor into userId,userName;</div><div class="line">			exit when some_stu_cursor%notfound; <span class="comment">--取不到数据,则退出循环.</span></div><div class="line">			DBMS_OUTPUT.PUT_LINE('id:'||userId||' name:'||userName);</div><div class="line">		<span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line">	close some_stu_cursor;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<h2 id="游标传递参数"><a href="#游标传递参数" class="headerlink" title="游标传递参数"></a>游标传递参数</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">DECLARE</div><div class="line">	cursor some_stu_cursor(id_no number DEFAULT 5) is SELECT ID,userName from students where id &lt;= id_no;</div><div class="line">	userId students.ID%TYPE;</div><div class="line">	userName students.userName%TYPE;</div><div class="line">	rec students%rowtype;</div><div class="line">BEGIN</div><div class="line">	--隐含打开游标</div><div class="line">	for rec in some_stu_cursor(2) LOOP</div><div class="line">		--隐含执行一个FETCH语句</div><div class="line">		DBMS_OUTPUT.PUT_LINE('id:'||rec.id ||' name:'||rec.userName );</div><div class="line">		--隐含监测c_sal%NOTFOUND</div><div class="line">	end loop;</div><div class="line">	DBMS_OUTPUT.PUT_LINE('======================');</div><div class="line">	open some_stu_cursor(id_no =&gt; 6);</div><div class="line">		loop</div><div class="line">			fetch some_stu_cursor into userId,userName;</div><div class="line">			exit when some_stu_cursor%notfound; --取不到数据,则退出循环.</div><div class="line">			DBMS_OUTPUT.PUT_LINE('id:'||userId||' name:'||userName);</div><div class="line">		end loop;</div><div class="line">	close some_stu_cursor;</div><div class="line">END;</div></pre></td></tr></table></figure>
<p>##　游标指定当前行<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span></div><div class="line">	userId STUDENTS.ID%<span class="keyword">type</span>;</div><div class="line">	i number(2) := 1;</div><div class="line">	cursor all_stu is <span class="keyword">SELECT</span> <span class="keyword">id</span>,userName <span class="keyword">from</span> students <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">	<span class="keyword">for</span> userId <span class="keyword">in</span> all_stu <span class="keyword">loop</span></div><div class="line">		<span class="keyword">update</span> students <span class="keyword">set</span> <span class="keyword">id</span>=i <span class="keyword">where</span> <span class="keyword">CURRENT</span> <span class="keyword">of</span> all_stu;<span class="comment">--当前行</span></div><div class="line">		i := i+1;</div><div class="line">	<span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure></p>
<h2 id="游标变量"><a href="#游标变量" class="headerlink" title="游标变量"></a>游标变量</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span></div><div class="line">	<span class="keyword">type</span> ID_NAME_REC <span class="keyword">is</span> <span class="built_in">RECORD</span>(<span class="keyword">id</span> STUDENTS.id%<span class="keyword">type</span>,<span class="keyword">name</span> students.USERNAME%<span class="keyword">type</span>);</div><div class="line">	type ID_NAME_CURSOR is REF CURSOR RETURN ID_NAME_REC;</div><div class="line">	rec ID_NAME_REC;</div><div class="line">	cur ID_NAME_CURSOR;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">	<span class="keyword">OPEN</span> cur <span class="keyword">for</span> <span class="keyword">SELECT</span> <span class="keyword">id</span>,username <span class="keyword">from</span> students;</div><div class="line">	loop	<span class="comment">--用for .. loop 不行.</span></div><div class="line">		FETCH cur into rec;</div><div class="line">		EXIT when cur%notfound;</div><div class="line">		DBMS_OUTPUT.PUT_LINE('id:'||rec.id||' name:'||rec.name);</div><div class="line">	<span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<h2 id="游标变量-没有return"><a href="#游标变量-没有return" class="headerlink" title="游标变量 - 没有return"></a>游标变量 - 没有return</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DECLARE</span></div><div class="line">	userId students.ID%<span class="keyword">TYPE</span>;</div><div class="line">	type REF_CURSOR is ref cursor;</div><div class="line">	var_cur REF_CURSOR;</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line">	<span class="keyword">open</span> var_cur <span class="keyword">for</span> <span class="keyword">SELECT</span> <span class="keyword">id</span> <span class="keyword">from</span> students <span class="keyword">where</span> <span class="keyword">id</span> &gt; <span class="number">5</span>;</div><div class="line">	loop	<span class="comment">--用for .. loop 不行.</span></div><div class="line">		FETCH var_cur into userid;</div><div class="line">		EXIT when var_cur%notfound;</div><div class="line">		DBMS_OUTPUT.PUT_LINE('id:'||userid);</div><div class="line">	<span class="keyword">end</span> <span class="keyword">loop</span>;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> SQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL </tag>
            
            <tag> ORACLE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Effective java 读书笔记]]></title>
      <url>/2017/02/09/effective-java-read-note/</url>
      <content type="html"><![CDATA[<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><ul>
<li>chapter02 -  创建和销毁对象<ul>
<li>第1条:考虑用静态工厂方法替代构造器(Factory method)</li>
<li>第2条:遇到多个构造器参数时,要考虑用构建器(Builder)</li>
<li>第3条:用私有构造器或者枚举类型强化单例属性(Singleton)</li>
<li>第4条:通过私有构造器强化不可实例化的能力</li>
<li>第5条:避免创建不必要的对象</li>
<li>第6条:消除过期的对象引用</li>
<li>第7条:避免使用终结方法(finalizer)</li>
</ul>
</li>
<li>chapter03 - 对所有对象都通用的方法<ul>
<li>第8条:覆盖equals时请遵守通用约定</li>
<li>第9条 覆盖equals时总要覆盖hashCode</li>
<li>第10条 始终要覆盖toString</li>
<li>第11条 谨慎使用clone</li>
<li>第12条 考虑实现<code>Comparable</code>接口</li>
</ul>
</li>
<li>chapter04 - 类和接口<ul>
<li>第13条 使类和成员的可访问性最小化</li>
<li>第14条 在公有类中使用访问方法而非公有域</li>
<li>第15条 使可变性最小化</li>
<li>第16条 复合优先于继承</li>
<li>第17条 要么为继承而设计，并提供文档说明，要么就禁止继承</li>
<li>第18条 接口优于抽象类</li>
<li>第19条 接口只用于定义类型</li>
<li>第20条 类层次优于标签类</li>
<li>第21条 用函数对象表示策略</li>
<li>第22条 优先考虑静态成员类</li>
</ul>
</li>
<li>chapter05 - 泛型<ul>
<li>第23条 请不要在新代码中使用原生态类型</li>
<li>第24条 消除非受检警告</li>
<li>第25条 列表优先于数组</li>
<li>第26条 优先考虑泛型</li>
<li>第27条 优先考虑泛型方法</li>
<li>第28条 利用有限制通配符来提升API的灵活性</li>
<li>第29条 优先考虑类型安全的异构容器</li>
</ul>
</li>
<li>chapter06 - 枚举和注解<ul>
<li>第30条 用enum代替int常量</li>
<li>第31条 用实例域代替序数</li>
<li>第32条 用EnumSet代替位域</li>
<li>第33条 用EnumMap代替序数索引</li>
<li>第34条 用接口模拟可伸缩的枚举</li>
<li>第35条 注解优先于命名模式</li>
<li>第36条 坚持使用Override注解</li>
<li>第37条 用标记接口定义类型</li>
</ul>
</li>
<li>chapter07 - 方法<ul>
<li>第38条 检查参数的有效性</li>
<li>第39条 必要时进行保护性拷贝</li>
<li>第40条 谨慎设计方法签名</li>
<li>第41条 慎用重载</li>
<li>第42条 慎用可变参数</li>
<li>第43条 返回零长度的数组或者集合，而不是null</li>
<li>第44条 为所有导出的API元素编写文档注释</li>
</ul>
</li>
<li>chapter08 - 通用程序设计<ul>
<li>第45条 将局部变量的作用域最小化</li>
<li>第46条 for-each循环优先于传统的for循环</li>
<li>第47条 了解和使用类库</li>
<li>第48条 如果需要精确的答案，请避免使用float和double</li>
<li>第49条 基本类型优先于装箱基本类型</li>
<li>第50条 如果其他类型更适合，则尽量避免使用字符串</li>
<li>第51条 当心字符串连接的性能</li>
<li>第52条 通过接口引用对象</li>
<li>第53条 接口优先于反射机制</li>
<li>第54条 谨慎地使用本地方法</li>
<li>第55条 谨慎地进行优化</li>
<li>第56条 遵守普遍接受的命名惯例</li>
</ul>
</li>
<li>chapter09 - 异常<ul>
<li>第57条 只针对异常的情况才使用异常</li>
<li>第58条 对可恢复的情况使用受检异常，对编程错误使用运行时异常</li>
<li>第59条 避免不必要地使用受检的异常</li>
<li>第60条 优先使用标准的异常</li>
<li>第61条 抛出与抽象相对应的异常</li>
<li>第62条 每个方法抛出的异常都要有文档</li>
<li>第63条 在细节消息中包含能捕获失败的信息</li>
<li>第64条 努力使失败保持原子性</li>
<li>第65条 不要忽略异常</li>
</ul>
</li>
<li>chapter10 - 并发<ul>
<li>第66条 同步访问共享的可变数据</li>
<li>第66条 同步访问共享的可变数据</li>
<li>第67条 避免过度同步</li>
<li>第68条 executor和task优先于线程</li>
<li>第69条 并发工具优先于wait和notify</li>
<li>第70条 线程安全性的文档化</li>
<li>第71条 慎用延迟初始化</li>
<li>第72条 不要依赖于线程调度器</li>
<li>第73条 避免使用线程组</li>
</ul>
</li>
<li>chapter11 - 序列化<ul>
<li>第74条 谨慎地实现Serializable接口</li>
<li>第75条 考虑使用自定义的序列化形式</li>
<li>第76条 保护性地编写readObject方法</li>
<li>第77条 对于实例控制，枚举类型优先于readResolve</li>
<li>第78条 考虑用序列化代理代替序列化实例</li>
</ul>
</li>
</ul>
<hr>
<hr>
<h1 id="chapter03-对所有对象都通用的方法"><a href="#chapter03-对所有对象都通用的方法" class="headerlink" title="chapter03 对所有对象都通用的方法"></a>chapter03 对所有对象都通用的方法</h1><hr>
<h2 id="第8条-覆盖equals时请遵守通用约定"><a href="#第8条-覆盖equals时请遵守通用约定" class="headerlink" title="第8条 覆盖equals时请遵守通用约定"></a>第8条 覆盖equals时请遵守通用约定</h2><h3 id="实现高质量equals方法的诀窍"><a href="#实现高质量equals方法的诀窍" class="headerlink" title="实现高质量equals方法的诀窍"></a>实现高质量equals方法的诀窍</h3><ul>
<li>使用==操作符检查”参数是否为这个对象的应用”</li>
<li>使用<code>instanceof</code>操作符检查”参数是否为正确的类型”</li>
<li>把参数传递转换成正确的类型</li>
<li>对于该类中的每个<strong>关键域</strong>,检查参数中的域是否与该对象中对应域项匹配</li>
<li>写完<code>equals</code>方法之后,应该问自己三个问题:它是否对称的,传递的,一致的?(记住<code>Point(x,y)</code>和<code>ColorPoint(x,y,color)</code>的例子)</li>
</ul>
<h3 id="覆写equals的告诫"><a href="#覆写equals的告诫" class="headerlink" title="覆写equals的告诫"></a>覆写equals的告诫</h3><ul>
<li>覆写<code>equals</code>时总要覆写<code>hashCode</code>(见第9条)</li>
<li>不要企图让<code>equals</code>方法过于智能</li>
<li>不要将<code>equals</code>方法参数声明中的<code>Object</code>对象替换为其他类型.</li>
</ul>
<h3 id="equals示例"><a href="#equals示例" class="headerlink" title="equals示例"></a>equals示例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneNumber</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> booleanF;</div><div class="line">    <span class="keyword">byte</span> byteF;</div><div class="line">    <span class="keyword">char</span> charF;</div><div class="line">    <span class="keyword">short</span> shortF;</div><div class="line">    <span class="keyword">int</span> intf;</div><div class="line">    <span class="keyword">float</span> floatf;</div><div class="line">    <span class="keyword">double</span> doublef;</div><div class="line">    Object objectF;</div><div class="line">    Object[] arrayF;</div><div class="line"></div><div class="line">    <span class="comment">/*由IDEA自动生成*/</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> MyObject)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        MyObject myObject = (MyObject) o;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (booleanF != myObject.booleanF) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (byteF != myObject.byteF) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (charF != myObject.charF) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (shortF != myObject.shortF) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (intf != myObject.intf) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (Float.compare(myObject.floatf, floatf) != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (Double.compare(myObject.doublef, doublef) != <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (!objectF.equals(myObject.objectF)) <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        <span class="comment">// Probably incorrect - comparing Object[] arrays with Arrays.equals</span></div><div class="line">        <span class="keyword">return</span> Arrays.equals(arrayF, myObject.arrayF);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="第9条-覆盖equals时总要覆盖hashCode"><a href="#第9条-覆盖equals时总要覆盖hashCode" class="headerlink" title="第9条 覆盖equals时总要覆盖hashCode"></a>第9条 覆盖equals时总要覆盖hashCode</h2><h3 id="Object规范-JavaSE6"><a href="#Object规范-JavaSE6" class="headerlink" title="Object规范[JavaSE6]"></a>Object规范[JavaSE6]</h3><ul>
<li>在应用程序的执行期间,只要对象的<code>equals</code>方法的比较操作所用到的信息没有被修改,<br>那么对这同一个对象调用多次,<code>hashCode</code>方法必须始终如一地返回同一个整数.<br>在同一个应用程序的多次执行过程中,每次执行返回的整数可以不一致.</li>
<li>如果两个对象根据<code>equals</code>方法比较结果是相等的,那么调用者两个对象中任意对象的<br><code>hashCode</code>方法都必须产生同样的整数结果.</li>
<li>如果两个对象根据<code>equals</code>方法比较结果是不相等的,那么调用这两个对象任意对象的<br><code>hashCode</code>方法,则不一定要产生不同的整数结果.<br><strong>总结</strong><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">equals等 =&gt; hashcode等; equals不等 ≠&gt; hashcode不等</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="覆写hashCode方法的简单办法"><a href="#覆写hashCode方法的简单办法" class="headerlink" title="覆写hashCode方法的简单办法"></a>覆写hashCode方法的简单办法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyObject</span> </span>&#123;</div><div class="line">    <span class="keyword">boolean</span> booleanF;</div><div class="line">    <span class="keyword">byte</span> byteF;</div><div class="line">    <span class="keyword">char</span> charF;</div><div class="line">    <span class="keyword">short</span> shortF;</div><div class="line">    <span class="keyword">int</span> intf;</div><div class="line">    <span class="keyword">float</span> floatf;</div><div class="line">    <span class="keyword">double</span> doublef;</div><div class="line">    Object objectF;</div><div class="line">    Object[] arrayF;</div><div class="line"></div><div class="line">    <span class="comment">/*由IDEA自动生成,使用Equals中涉及到的每个域*/</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> result;</div><div class="line">        <span class="keyword">long</span> temp;</div><div class="line">        result = (booleanF ? <span class="number">1</span> : <span class="number">0</span>);</div><div class="line">        result = <span class="number">31</span> * result + (<span class="keyword">int</span>) byteF;</div><div class="line">        result = <span class="number">31</span> * result + (<span class="keyword">int</span>) charF;</div><div class="line">        result = <span class="number">31</span> * result + (<span class="keyword">int</span>) shortF;</div><div class="line">        result = <span class="number">31</span> * result + intf;</div><div class="line">        result = <span class="number">31</span> * result + (floatf != +<span class="number">0.0f</span> ? Float.floatToIntBits(floatf) : <span class="number">0</span>);</div><div class="line">        temp = Double.doubleToLongBits(doublef);</div><div class="line">        result = <span class="number">31</span> * result + (<span class="keyword">int</span>) (temp ^ (temp &gt;&gt;&gt; <span class="number">32</span>));</div><div class="line">        result = <span class="number">31</span> * result + objectF.hashCode();</div><div class="line">        result = <span class="number">31</span> * result + Arrays.hashCode(arrayF);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="第11条-谨慎使用clone"><a href="#第11条-谨慎使用clone" class="headerlink" title="第11条 谨慎使用clone"></a>第11条 谨慎使用clone</h2><h3 id="深拷贝简单例子"><a href="#深拷贝简单例子" class="headerlink" title="深拷贝简单例子"></a>深拷贝简单例子</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">ublic <span class="class"><span class="keyword">class</span> <span class="title">CloneObject</span> <span class="keyword">implements</span> <span class="title">Cloneable</span></span>&#123;</div><div class="line">    Object[] elememts = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>&#125;;</div><div class="line">    Integer anInt = <span class="number">1</span>;</div><div class="line">    List&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;(Arrays.asList(<span class="string">"1"</span>,<span class="string">"2"</span>));</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> CloneObject <span class="title">clone</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            CloneObject clone = (CloneObject) <span class="keyword">super</span>.clone();</div><div class="line">            clone.anInt = <span class="keyword">new</span> Integer(<span class="keyword">this</span>.anInt); <span class="comment">//深拷贝</span></div><div class="line">            clone.elememts = <span class="keyword">this</span>.elememts.clone();</div><div class="line">            clone.list =(List&lt;String&gt;) ((LinkedList&lt;String&gt;)list).clone(); <span class="comment">//浅拷贝</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; list != <span class="keyword">null</span> &amp;&amp; i&lt;list.size() ; ++i)&#123;</div><div class="line">                clone.list.set(i, <span class="keyword">new</span> String(list.get(i))); <span class="comment">//new String对String对象深拷贝.</span></div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> clone;</div><div class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></div><div class="line">    &#123;</div><div class="line">        CloneObject a = <span class="keyword">new</span> CloneObject();</div><div class="line">        CloneObject b = a.clone();</div><div class="line"></div><div class="line">        System.out.println(a==b);                           <span class="comment">//false</span></div><div class="line">        System.out.println(a.anInt == b.anInt);             <span class="comment">//false</span></div><div class="line">        System.out.println(a.elememts == b.elememts);       <span class="comment">//false</span></div><div class="line">        System.out.println(a.list == b.list);               <span class="comment">//false</span></div><div class="line">        System.out.println(a.list.get(<span class="number">0</span>) == b.list.get(<span class="number">0</span>)); <span class="comment">//false</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="chapter04-类和接口"><a href="#chapter04-类和接口" class="headerlink" title="chapter04 类和接口"></a>chapter04 类和接口</h1><hr>
<h2 id="第23条-请不要在新代码中使用原生态类型"><a href="#第23条-请不要在新代码中使用原生态类型" class="headerlink" title="第23条 请不要在新代码中使用原生态类型"></a>第23条 请不要在新代码中使用原生态类型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//参数化类型,表示可以包含人和对象类型的集合</span></div><div class="line"><span class="comment">//有受检异常</span></div><div class="line"> List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">list.add(<span class="keyword">new</span> String(<span class="string">"a"</span>));</div><div class="line">Integer b = list.get(<span class="number">0</span>);<span class="comment">//受检异常</span></div><div class="line"></div><div class="line"><span class="comment">//通配符类型,表示只能包含某种位置对象类型的集合</span></div><div class="line"><span class="comment">//有受检异常</span></div><div class="line"> List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">list.add(<span class="keyword">new</span> String(<span class="string">"a"</span>));<span class="comment">//受检异常</span></div><div class="line"></div><div class="line"><span class="comment">//原生态类型,脱离了泛型系统</span></div><div class="line"><span class="comment">//运行时异常</span></div><div class="line">Set s = <span class="keyword">new</span> HashSet();</div><div class="line">s.add(<span class="keyword">new</span> String(<span class="string">"str"</span>));</div><div class="line">Integer a = (Integer)list.get(<span class="number">0</span>); <span class="comment">//java.lang.ClassCastException</span></div></pre></td></tr></table></figure>
<h1 id="chapter09-异常"><a href="#chapter09-异常" class="headerlink" title="chapter09 异常"></a>chapter09 异常</h1><hr>
<h2 id="第60条-优先使用标准的异常"><a href="#第60条-优先使用标准的异常" class="headerlink" title="第60条 优先使用标准的异常"></a>第60条 优先使用标准的异常</h2><p><img src="/img/effective-java-read-note/common-exception.png" alt="常用异常"></p>
]]></content>
      
        <categories>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Java </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SQL基础-ORACLE]]></title>
      <url>/2017/02/08/learn-oracle/</url>
      <content type="html"><![CDATA[<h3 id="元数据查询"><a href="#元数据查询" class="headerlink" title="元数据查询"></a>元数据查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--1.查看表字段名</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> all_tab_columns <span class="keyword">where</span> TABLE_name=<span class="string">'CCS_LOAN'</span>;</div></pre></td></tr></table></figure>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--1,REGEXP_LIKE</span></div><div class="line"><span class="comment">--默认是大小写敏感的</span></div><div class="line"><span class="comment">--REGEXP_LIKE(ACCT_TYPE,'E','i')是大小写不敏感</span></div><div class="line"><span class="keyword">SELECT</span> ACCT_NBR <span class="keyword">from</span> CCS_ACCT</div><div class="line"><span class="keyword">where</span> <span class="keyword">REGEXP_LIKE</span>(ACCT_NBR,<span class="string">'1$'</span>);</div><div class="line"></div><div class="line"><span class="comment">--2,REGEXP_INSTR</span></div><div class="line"><span class="comment">--查找第一次出现匹配模式是index</span></div><div class="line"><span class="keyword">SELECT</span> REGEXP_INSTR(<span class="number">112233</span>,<span class="string">'233'</span>)  <span class="keyword">from</span> dual;</div><div class="line"><span class="comment">--3,REGEXP_SUBSTR</span></div><div class="line"><span class="comment">--查找匹配的字串</span></div><div class="line"><span class="keyword">SELECT</span> REGEXP_SUBSTR(<span class="number">112233</span>,<span class="string">'[1-2]*'</span>) <span class="keyword">from</span> dual;</div><div class="line"><span class="comment">--4,REGEXP_REPLACE</span></div><div class="line"><span class="comment">--替换匹配字串的值</span></div><div class="line"><span class="keyword">SELECT</span> REGEXP_REPLACE(<span class="number">112233</span>,<span class="string">'1&#123;2&#125;'</span>,<span class="string">'aa'</span>) <span class="keyword">from</span> dual;</div></pre></td></tr></table></figure>
<h3 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--1,合集;UNION (去重),UNION ALL(不去重)</span></div><div class="line"><span class="comment">--UNION</span></div><div class="line">(<span class="keyword">SELECT</span> ACCT_NBR <span class="keyword">from</span> CCS_ACCT c <span class="keyword">WHERE</span> <span class="keyword">REGEXP_LIKE</span>(ACCT_NBR,<span class="string">'0$'</span>))</div><div class="line"><span class="keyword">UNION</span></div><div class="line">(<span class="keyword">SELECT</span> ACCT_NBR <span class="keyword">from</span> CCS_ACCT c <span class="keyword">WHERE</span> <span class="keyword">REGEXP_LIKE</span>(ACCT_NBR,<span class="string">'10$'</span>))</div><div class="line">;</div><div class="line"><span class="comment">--UNION ALL</span></div><div class="line">(<span class="keyword">SELECT</span> ACCT_NBR <span class="keyword">from</span> CCS_ACCT c <span class="keyword">WHERE</span> <span class="keyword">REGEXP_LIKE</span>(ACCT_NBR,<span class="string">'0$'</span>))</div><div class="line"><span class="keyword">UNION</span> ALL</div><div class="line">(<span class="keyword">SELECT</span> ACCT_NBR <span class="keyword">from</span> CCS_ACCT c <span class="keyword">WHERE</span> <span class="keyword">REGEXP_LIKE</span>(ACCT_NBR,<span class="string">'10$'</span>))</div><div class="line">;</div><div class="line"></div><div class="line"><span class="comment">--2,交集; INTERSECT</span></div><div class="line">(<span class="keyword">SELECT</span> ACCT_NBR <span class="keyword">from</span> CCS_ACCT c <span class="keyword">WHERE</span> <span class="keyword">REGEXP_LIKE</span>(ACCT_NBR,<span class="string">'0$'</span>))</div><div class="line"><span class="keyword">INTERSECT</span></div><div class="line">(<span class="keyword">SELECT</span> ACCT_NBR <span class="keyword">from</span> CCS_ACCT c <span class="keyword">WHERE</span> <span class="keyword">REGEXP_LIKE</span>(ACCT_NBR,<span class="string">'10$'</span>))</div><div class="line">;</div><div class="line"></div><div class="line"><span class="comment">--3.差集. MINUS</span></div><div class="line">(<span class="keyword">SELECT</span> ACCT_NBR <span class="keyword">from</span> CCS_ACCT c <span class="keyword">WHERE</span> <span class="keyword">REGEXP_LIKE</span>(ACCT_NBR,<span class="string">'0$'</span>))</div><div class="line"><span class="keyword">MINUS</span></div><div class="line">(<span class="keyword">SELECT</span> ACCT_NBR <span class="keyword">from</span> CCS_ACCT c <span class="keyword">WHERE</span> <span class="keyword">REGEXP_LIKE</span>(ACCT_NBR,<span class="string">'10$'</span>))</div><div class="line">;</div></pre></td></tr></table></figure>
<h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--1.字符串拼接;concat,ORACLE只能拼接两个field</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">concat</span>(<span class="string">'a'</span>,<span class="string">'b'</span>) <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--2.字符串长度,length</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">length</span>(<span class="string">'aaa'</span>) <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--3.字符串比较</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">case</span> <span class="keyword">when</span> <span class="string">'aa'</span>&lt;<span class="string">'ab'</span> <span class="keyword">then</span> <span class="string">'true'</span> <span class="keyword">else</span> <span class="string">'false'</span> <span class="keyword">end</span> <span class="keyword">as</span> <span class="keyword">result</span> <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--4.字符串裁剪</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTR</span>(<span class="string">'123456789'</span>,<span class="number">1</span>,<span class="number">4</span>) <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--5.长度不足左右填充; lpad,rpad ,长度不足则填充,长度够则截取指定长度.</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">lpad</span>(<span class="string">'1234'</span>,<span class="number">10</span>,<span class="string">'*'</span>),<span class="keyword">lpad</span>(<span class="string">'1234'</span>,<span class="number">2</span>,<span class="string">'*'</span>) <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--6.左右删除;LTRIM,RTRIM</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">RTRIM</span>(<span class="string">'00111333111'</span>,<span class="string">'(0|1)'</span>),<span class="keyword">LTRIM</span>(<span class="string">'00111333111'</span>,<span class="string">'(0|1)'</span>) <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--7.字符串替换;REPLACE</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">REPLACE</span>(<span class="string">'123'</span>,<span class="string">'2'</span>,<span class="string">'a'</span>) <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--8.查找第一次出现的位置</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">INSTR</span>(<span class="string">'abcdc'</span>, <span class="string">'c'</span>)<span class="keyword">from</span> dual;</div></pre></td></tr></table></figure>
<h3 id="时间日期操作"><a href="#时间日期操作" class="headerlink" title="时间日期操作"></a>时间日期操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--1.系统时间,时间戳</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">sysdate</span>,SYSTIMESTAMP,<span class="keyword">CURRENT_DATE</span></div><div class="line"><span class="keyword">from</span> dual;</div><div class="line"><span class="comment">--2.字符串转日期</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">TO_DATE</span>(<span class="string">'2016-12-06 20:15:30'</span>,<span class="string">'yyyy-mm-dd hh24:mi:ss'</span>),<span class="keyword">TO_DATE</span>(<span class="string">'20161206'</span>,<span class="string">'yyyy-mm-dd'</span>),<span class="keyword">cast</span>(<span class="string">'11:15:30'</span><span class="keyword">as</span> <span class="keyword">time</span>)</div><div class="line"><span class="keyword">from</span> dual</div><div class="line">;</div><div class="line"><span class="comment">--3.日期转字符串, 获取年月日,季度.</span></div><div class="line"><span class="keyword">SELECT</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'yyyy-mm'</span>) <span class="keyword">from</span> dual;</div><div class="line"><span class="keyword">SELECT</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'q'</span>) <span class="keyword">from</span> dual;</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">extract</span>(<span class="keyword">YEAR</span> <span class="keyword">from</span> <span class="keyword">sysdate</span>),<span class="keyword">sysdate</span> <span class="keyword">from</span> dual;<span class="comment">--取出时间中的Year</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">extract</span>(<span class="keyword">MONTH</span> <span class="keyword">from</span> <span class="keyword">sysdate</span>),<span class="keyword">sysdate</span> <span class="keyword">from</span> dual;<span class="comment">--取出时间中的Month</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">extract</span>(<span class="keyword">DAY</span> <span class="keyword">from</span> <span class="keyword">sysdate</span>),<span class="keyword">sysdate</span> <span class="keyword">from</span> dual;<span class="comment">--取出时间中的Day</span></div><div class="line"><span class="comment">--4.日期增加</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span>,add_months(<span class="keyword">sysdate</span>,<span class="number">12</span>) <span class="keyword">from</span> dual;        <span class="comment">--加1年</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span>,add_months(<span class="keyword">sysdate</span>,<span class="number">1</span>) <span class="keyword">from</span> dual;        <span class="comment">--加1月</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span>,to_char(<span class="keyword">sysdate</span>+<span class="number">7</span>,<span class="string">'yyyy-mm-dd HH24:MI:SS'</span>) <span class="keyword">from</span> dual;   <span class="comment">--加1星期</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span>,to_char(<span class="keyword">sysdate</span>+<span class="number">1</span>,<span class="string">'yyyy-mm-dd HH24:MI:SS'</span>) <span class="keyword">from</span> dual;   <span class="comment">--加1天</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span>,to_char(<span class="keyword">sysdate</span>+<span class="number">1</span>/<span class="number">24</span>,<span class="string">'yyyy-mm-dd HH24:MI:SS'</span>) <span class="keyword">from</span> dual;  <span class="comment">--加1小时</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span>,to_char(<span class="keyword">sysdate</span>+<span class="number">1</span>/<span class="number">24</span>/<span class="number">60</span>,<span class="string">'yyyy-mm-dd HH24:MI:SS'</span>) <span class="keyword">from</span> dual;  <span class="comment">--加1分钟</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span>,to_char(<span class="keyword">sysdate</span>+<span class="number">1</span>/<span class="number">24</span>/<span class="number">60</span>/<span class="number">60</span>,<span class="string">'yyyy-mm-dd HH24:MI:SS'</span>) <span class="keyword">from</span> dual;  <span class="comment">--加1秒</span></div><div class="line"><span class="comment">--5.日期间隔</span></div><div class="line"><span class="keyword">select</span> months_between(<span class="keyword">to_date</span>(<span class="string">'2006-04-20'</span>,<span class="string">'yyyy-mm-dd'</span>),<span class="keyword">to_date</span>(<span class="string">'2005-05-20'</span>,<span class="string">'yyyy-mm-dd'</span>)) mon_betw <span class="keyword">from</span> dual; <span class="comment">--时间间隔(月)</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">ceil</span>(((<span class="keyword">to_date</span>(<span class="string">'2008-05-02 00:00'</span> , <span class="string">'yyyy-mm-dd hh24:mi:ss'</span>) - <span class="keyword">to_date</span>(<span class="string">'2008-05-01 22:58'</span> , <span class="string">'yyyy-mm-dd hh24:mi:ss'</span>))) * <span class="number">24</span> * <span class="number">60</span>) <span class="keyword">FROM</span> DUAL; <span class="comment">--间隔分钟</span></div></pre></td></tr></table></figure>
<h3 id="CAST转换操作"><a href="#CAST转换操作" class="headerlink" title="CAST转换操作"></a>CAST转换操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--1.转换为Integer</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">cast</span>(<span class="string">'111'</span> <span class="keyword">as</span> <span class="built_in">int</span>) <span class="keyword">from</span> dual;</div><div class="line"><span class="comment">--2.转换为NUMBER</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">cast</span>(<span class="string">'111.333'</span> <span class="keyword">as</span>  <span class="built_in">NUMBER</span>(<span class="number">5</span>,<span class="number">2</span>)) <span class="keyword">from</span> dual;</div><div class="line"><span class="keyword">SELECT</span> to_number(<span class="string">'123'</span>) <span class="keyword">from</span> dual;</div></pre></td></tr></table></figure>
<h3 id="分组操作"><a href="#分组操作" class="headerlink" title="分组操作"></a>分组操作</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--按季度分组统计</span></div><div class="line"><span class="keyword">select</span> to_CHAR(a.SETUP_DATE,<span class="string">'yyyy-q'</span>) m,<span class="keyword">count</span>(*)</div><div class="line"><span class="keyword">from</span> CCS_ACCT a</div><div class="line"><span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span></div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> to_CHAR(a.SETUP_DATE,<span class="string">'yyyy-q'</span>);</div></pre></td></tr></table></figure>
<h3 id="ALL-ANY-EXISTS-操作符"><a href="#ALL-ANY-EXISTS-操作符" class="headerlink" title="ALL ANY EXISTS 操作符"></a>ALL ANY EXISTS 操作符</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--1.ALL.字段值与ALL结果集中进行比较,与每一个比较都成立,则结果为真.</span></div><div class="line"><span class="comment">--与not in 差别. 下面的例子,ALL将返回结果集,not in返回空集.</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> CCS_ACCT</div><div class="line"><span class="keyword">WHERE</span> ACCT_NBR &lt;&gt; ALL(<span class="keyword">SELECT</span> ACCT_NBR <span class="keyword">from</span> CCS_ACCT <span class="keyword">where</span> ACCT_NBR <span class="keyword">in</span> (<span class="number">1123000</span>,<span class="number">1123001</span>,<span class="literal">NULL</span>))</div><div class="line">;</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> CCS_ACCT</div><div class="line"><span class="keyword">WHERE</span> ACCT_NBR <span class="keyword">not</span> <span class="keyword">in</span> (<span class="number">1123000</span>,<span class="number">1123001</span>,<span class="literal">NULL</span>);</div><div class="line"><span class="comment">--2.Any,字段值与any结果集中进行比较,只要有一个成立,则结果为真.</span></div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> CCS_ACCT</div><div class="line"><span class="keyword">WHERE</span> CURR_BAL &gt; <span class="keyword">any</span>(<span class="keyword">SELECT</span> CURR_BAL <span class="keyword">from</span> CCS_ACCT <span class="keyword">where</span> <span class="keyword">ROWNUM</span>&lt;<span class="number">5</span>)</div><div class="line"></div><div class="line"><span class="comment">--3.EXISTS</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">sysdate</span> <span class="keyword">from</span> dual <span class="keyword">where</span> <span class="keyword">EXISTS</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> dual <span class="keyword">where</span> <span class="number">1</span>=<span class="number">1</span>);</div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">sysdate</span> <span class="keyword">from</span> dual <span class="keyword">where</span> <span class="keyword">EXISTS</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> dual <span class="keyword">where</span> <span class="number">1</span>&lt;&gt;<span class="number">1</span>);</div></pre></td></tr></table></figure>
<h3 id="trunc、round、ceil-floor"><a href="#trunc、round、ceil-floor" class="headerlink" title="trunc、round、ceil/floor"></a>trunc、round、ceil/floor</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--1.trunc函数</span></div><div class="line"><span class="comment">--trunc函数处理数字 TRUNC(number[,decimals])</span></div><div class="line"><span class="keyword">select</span> trunc(<span class="number">123.89</span>,<span class="number">0</span>) <span class="keyword">from</span> dual; <span class="comment">-- 123</span></div><div class="line"><span class="keyword">select</span> trunc(<span class="number">123.123</span>,<span class="number">2</span>) <span class="keyword">from</span> dual; <span class="comment">--123.12</span></div><div class="line"><span class="keyword">select</span> trunc(<span class="number">123.123</span>,<span class="number">-1</span>) <span class="keyword">from</span> dual; <span class="comment">--120</span></div><div class="line"><span class="comment">--trunc函数处理日期 TRUNC(date,[fmt]), sysdate为2017-02-15 10:30:09</span></div><div class="line"><span class="keyword">SELECT</span> trunc(<span class="keyword">sysdate</span>,<span class="string">'yyyy'</span>),<span class="keyword">sysdate</span> <span class="keyword">from</span> dual;  <span class="comment">--返回当年第一天. 2017-01-01 00:00:00</span></div><div class="line"><span class="keyword">SELECT</span> trunc(<span class="keyword">sysdate</span>,<span class="string">'mm'</span>),<span class="keyword">sysdate</span> <span class="keyword">from</span> dual; <span class="comment">--返回当月第一天. 2017-02-01 00:00:00</span></div><div class="line"><span class="keyword">SELECT</span> trunc(<span class="keyword">sysdate</span>,<span class="string">'d'</span>),<span class="keyword">sysdate</span> <span class="keyword">from</span> dual; <span class="comment">--返回当前星期的第一天. 2017-02-12 00:00:00</span></div><div class="line"><span class="keyword">SELECT</span> trunc(<span class="keyword">sysdate</span>,<span class="string">'dd'</span>) <span class="keyword">from</span> dual;  <span class="comment">--截取到当天0点0分0秒,2018-08-25 00:00:00</span></div><div class="line"><span class="keyword">SELECT</span> trunc(<span class="keyword">sysdate</span>,<span class="string">'hh24'</span>) <span class="keyword">from</span> dual;  <span class="comment">--截取到小时（当前小时，零分零秒）,2018-08-25 04:00:00</span></div><div class="line"><span class="keyword">SELECT</span> trunc(<span class="keyword">sysdate</span>,<span class="string">'mi'</span>) <span class="keyword">from</span> dual; <span class="comment">--截取到分（当前分，零秒）2018-08-25 04:28:00</span></div><div class="line"><span class="keyword">SELECT</span> trunc(<span class="keyword">sysdate</span>,<span class="string">'ss'</span>) <span class="keyword">from</span> dual ;<span class="comment">--报错，没有精确到秒的格式</span></div><div class="line"></div><div class="line"><span class="comment">--2.round 函数</span></div><div class="line"><span class="comment">--round函数处理数字 round( number, [ decimal_places ] ), decimal_places为保留的小数位数</span></div><div class="line"><span class="comment">--传回一个数值，该数值是按照指定的小数位元数进行四舍五入运算的结果。</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="number">123.456</span>, <span class="number">0</span>) <span class="keyword">from</span> dual;     <span class="comment">--回传 123</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="number">123.456</span>, <span class="number">1</span>) <span class="keyword">from</span> dual;     <span class="comment">--回传 123.5</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="number">-123.456</span>, <span class="number">2</span>) <span class="keyword">from</span> dual;    <span class="comment">--回传 -123.46</span></div><div class="line"><span class="comment">--round函数处理日期 round(date,fmt) ,fmt为四舍五入的单位.</span></div><div class="line"><span class="comment">--月</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="keyword">to_date</span>(<span class="string">'20170215'</span>,<span class="string">'yyyymmdd'</span>),<span class="string">'mm'</span>) <span class="keyword">from</span> dual;    <span class="comment">-- 2017-02-01</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="keyword">to_date</span>(<span class="string">'20170216'</span>,<span class="string">'yyyymmdd'</span>),<span class="string">'mm'</span>) <span class="keyword">from</span> dual;    <span class="comment">-- 2017-03-01</span></div><div class="line"><span class="comment">--日</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="keyword">to_date</span>(<span class="string">'20170215 11:20'</span>,<span class="string">'yyyymmdd hh24:mi'</span>),<span class="string">'dd'</span>) <span class="keyword">from</span> dual;    <span class="comment">-- 2017-02-15 00:00:00</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="keyword">to_date</span>(<span class="string">'20170215 12:20'</span>,<span class="string">'yyyymmdd hh24:mi'</span>),<span class="string">'dd'</span>) <span class="keyword">from</span> dual;    <span class="comment">-- 2017-02-16 00:00:00</span></div><div class="line"><span class="comment">--小时</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="keyword">to_date</span>(<span class="string">'20170215 11:20'</span>,<span class="string">'yyyymmdd hh24:mi'</span>),<span class="string">'hh'</span>) <span class="keyword">from</span> dual;    <span class="comment">-- 2017-02-15 11:00:00</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">round</span>(<span class="keyword">to_date</span>(<span class="string">'20170215 11:30'</span>,<span class="string">'yyyymmdd hh24:mi'</span>),<span class="string">'hh'</span>) <span class="keyword">from</span> dual;    <span class="comment">-- 2017-02-15 12:00:00</span></div><div class="line"></div><div class="line"><span class="comment">--3.ceil/floor 函数</span></div><div class="line"><span class="comment">--处理数字</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">ceil</span>(<span class="number">123.456</span>) <span class="keyword">from</span> dual;     <span class="comment">--回传 124</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">floor</span>(<span class="number">123.456</span>) <span class="keyword">from</span> dual;     <span class="comment">--回传 123</span></div><div class="line"><span class="comment">--处理日期</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">ceil</span>(<span class="keyword">to_date</span>(<span class="string">'20170215 11:00'</span>,<span class="string">'yyyymmdd hh24:mi'</span>) - <span class="keyword">to_date</span>(<span class="string">'20170214 11:00'</span>,<span class="string">'yyyymmdd hh24:mi'</span>)) <span class="keyword">from</span> dual; <span class="comment">-- return 1</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">ceil</span>(<span class="keyword">to_date</span>(<span class="string">'20170215 11:00'</span>,<span class="string">'yyyymmdd hh24:mi'</span>) - <span class="keyword">to_date</span>(<span class="string">'20170214 10:59'</span>,<span class="string">'yyyymmdd hh24:mi'</span>)) <span class="keyword">from</span> dual; <span class="comment">-- return 2</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">floor</span>(<span class="keyword">to_date</span>(<span class="string">'20170215 11:00'</span>,<span class="string">'yyyymmdd hh24:mi'</span>) - <span class="keyword">to_date</span>(<span class="string">'20170214 10:59'</span>,<span class="string">'yyyymmdd hh24:mi'</span>)) <span class="keyword">from</span> dual; <span class="comment">-- return 1</span></div></pre></td></tr></table></figure>
<h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--1.NVL NVL2 NULLIF</span></div><div class="line"><span class="comment">--NVL(e1,e2), 相当于 e1 != NULL ? e1 : e2</span></div><div class="line"><span class="keyword">SELECT</span> NVL(<span class="literal">NULL</span>,<span class="string">'0'</span>), NVL(<span class="string">'123'</span>,<span class="string">'1'</span>) <span class="keyword">from</span> dual;</div><div class="line"><span class="comment">--NVL(field,e1,e2) 相当于 field != NULL ? e1:e2</span></div><div class="line"><span class="keyword">SELECT</span> NVL2(<span class="literal">NULL</span>,<span class="string">'not-null'</span>,<span class="string">'null'</span>),NVL2(<span class="string">'a'</span>,<span class="string">'not-null'</span>,<span class="string">'null'</span>) <span class="keyword">from</span> dual;</div><div class="line"><span class="comment">--NULLIF(e1,e2), 相当于 e1==e2 ? NULL : e1</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">NULLIF</span>(<span class="string">'a'</span>,<span class="string">'a'</span>),<span class="keyword">NULLIF</span>(<span class="string">'a'</span>,<span class="string">'b'</span>),<span class="keyword">NULLIF</span>(<span class="string">'b'</span>,<span class="string">'a'</span>) <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--2. (+)的使用,哪边有（+）哪边就允许为空</span></div><div class="line"><span class="keyword">SELECT</span> a.*, b.* <span class="keyword">from</span> a,b <span class="keyword">where</span> a.ID(+) = b.ID ; <span class="comment">--就是一个右连接，等同于select a.*, b.* from a right join b on a.ID=b.ID</span></div><div class="line"><span class="keyword">SELECT</span> a.*, b.* <span class="keyword">from</span> a,b <span class="keyword">where</span> a.ID = b.ID (+);  <span class="comment">--就是一个左连接，等同于select a.*, b.* from a left join b on a.ID=b.ID</span></div><div class="line"></div><div class="line"><span class="comment">--3. decode</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">decode</span>(<span class="string">'a'</span>,<span class="string">'a'</span>,<span class="number">96</span>,<span class="string">'b'</span>,<span class="number">97</span>) <span class="keyword">from</span> dual; <span class="comment">-- 96</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">decode</span>(<span class="string">'b'</span>,<span class="string">'a'</span>,<span class="number">96</span>,<span class="string">'b'</span>,<span class="number">97</span>) <span class="keyword">from</span> dual; <span class="comment">-- 97</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> SQL </category>
            
        </categories>
        
        
        <tags>
            
            <tag> SQL </tag>
            
            <tag> ORACLE </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Markdown 基本语法]]></title>
      <url>/2017/02/08/markdown/</url>
      <content type="html"><![CDATA[<p><strong><em><a href="http://www.jianshu.com/p/1e402922ee32/" target="_blank" rel="external">参考</a></em></strong></p>
<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 一级标题</div><div class="line">## 二级标题</div><div class="line">### 三级标题</div></pre></td></tr></table></figure>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><hr>
<h1 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h1><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* a</div><div class="line">* b</div><div class="line">* c</div></pre></td></tr></table></figure>
<ul>
<li>a</li>
<li>b</li>
<li>c</li>
</ul>
<hr>
<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. a</div><div class="line">2. b</div><div class="line">3. c</div></pre></td></tr></table></figure>
<ol>
<li>a</li>
<li>b</li>
<li>c</li>
</ol>
<hr>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">| Tables        | Are           | Cool  |</div><div class="line">| ------------- |:-------------:| -----:|</div><div class="line">| col 3 is      | right-aligned | $1600 |</div><div class="line">| col 2 is      | centered      |   $12 |</div><div class="line">| zebra stripes | are neat      |    $1 |</div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>zebra stripes</td>
<td style="text-align:center">are neat</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">*** 或 ---</div></pre></td></tr></table></figure>
<hr>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><code>![description]($path)</code><br><img src="/img/markdown/pic.png" alt="打赏"></p>
<hr>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><code>[google](https://www.google.com)</code><br><a href="https://www.google.com" target="_blank" rel="external">google</a></p>
<hr>
<h2 id="语法高亮"><a href="#语法高亮" class="headerlink" title="语法高亮"></a>语法高亮</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"hexo highlight"</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String world = <span class="string">"World!"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
        <categories>
            
            <category> Markdown </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[善用佳软]]></title>
      <url>/2017/02/06/nice-software/</url>
      <content type="html"><![CDATA[<p>工欲善其事必先利其器.</p>
<h1 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h1><ul>
<li>IDEA - Java开发利器</li>
</ul>
<h1 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h1><ul>
<li>7-zip - 开源精简</li>
</ul>
<h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><ul>
<li><p>Atom</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">推荐插件:</div><div class="line">  (autocomplete-json),</div><div class="line">  (format-sql,&quot;SQL格式化&quot;),</div><div class="line">  (highlight-selected,&quot;高亮当前选中字符&quot;),</div><div class="line">  (minimap,&quot;代码小视图&quot;),</div><div class="line">  (pretty-json,&quot;JSON格式化&quot;),</div><div class="line">  (split-diff,&quot;代码对比&quot;)</div></pre></td></tr></table></figure>
</li>
<li><p>Notepad++</p>
</li>
</ul>
<h1 id="剪切板"><a href="#剪切板" class="headerlink" title="剪切板"></a>剪切板</h1><ul>
<li>Ditto - 攻城狮强烈推荐使用</li>
</ul>
<h1 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h1><ul>
<li>Total Commander - 学习成本较大</li>
<li>Clover - 简单易用</li>
<li>EveryThing - 高效,支持正则,模糊搜索.</li>
<li>Listary - 不仅支持文件搜索,而且支持启动应用</li>
</ul>
<h1 id="To-do"><a href="#To-do" class="headerlink" title="To-do"></a>To-do</h1><ul>
<li>Wunderlist - 多终端同步</li>
</ul>
<h1 id="系统维护"><a href="#系统维护" class="headerlink" title="系统维护"></a>系统维护</h1><ul>
<li>CCleaner - 小巧</li>
<li>绿鹰文件解锁粉碎器 - 绿色便捷</li>
</ul>
<h1 id="梯子"><a href="#梯子" class="headerlink" title="梯子"></a>梯子</h1><ul>
<li>Lantern</li>
</ul>
<h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><ul>
<li>百度脑图</li>
<li>XMind</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 开发环境 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 开发环境 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
